FleaPHP 概述
************

FleaPHP 快速预览：

-  FleaPHP 是一个开发工具，帮助开发者快速创建复杂的 Web 应用程序
-  FleaPHP 是一个可以免费使用的开发框架，采用 BSD 协议发布
-  FleaPHP 与 PHP4/PHP5 兼容
-  FleaPHP 在众多开发框架中具有领先的性能表现，完成能够胜任大型应用的负荷
-  FleaPHP 使用 MVC 模式，但也可以不通过 MVC 模式来使用
-  FleaPHP 提供丰富的功能组件，解决各种常见的问题
-  FleaPHP 提供灵活易用的访问控制解决方案
-  FleaPHP 是开放式的框架，能够很容易的将第三方库集成到 FleaPHP 应用程序中
-  FleaPHP 提供代码生成工具，简化开发工作


FleaPHP 主要功能
================

FleaPHP 在数据库操作、用户界面、应用程序结构三方面提供了出色的解决方案。这三个方面也是创建高质量应用程序必须考虑的基本要素。

-  支持多种流行的数据库系统
-  提供功能强大的自动化数据库操作，有效提高开发效率
-  支持各种流行的模板引擎，充分保障开发者现有的智力投资
-  提供 WebControls 机制，让开发者可以创建组件化的用户界面
-  提供容易使用的 Ajax 支持
-  基于角色的访问控制
-  文件上传处理
-  图像处理
-  Session 管理
-  数据验证
-  多语言支持
-  脚手架功能
-  JSON 支持
-  灵活的 URL 处理
-  分页操作
-  图像验证码
-  发送文件到浏览器
-  缓存服务


应用程序工作流程
================

对于使用 MVC 模式运行的 FleaPHP 应用程序，工作流程如下图：

[* 03_application_flow.png *]

1. index.php 是整个应用程序的入口，负责载入 FleaPHP 框架，以及读取应用程序的设置文件，然后启动 MVC 模式
2. 调度器根据 URL 参数确定要调用的控制器和动作
3. 访问控制根据当前用户的权限和试图访问的内容，进行安全检查，阻止未经授权的访问
4. 应用程序控制器包含多个动作，分别对应用户的不同操作。在控制器动作中再调用底层的库或者业务层，完成实际的操作
5. 应用程序控制器获得需要的数据后，通过模板引擎载入模板，将最终要显示的页面内容返回给浏览器


FleaPHP 中的 MVC 模式
=====================

MVC 是一系列略有不同的模式。FleaPHP 采用的是 "Passive（被动）MVC 模式":http://www.phpwact.org/pattern/model_view_controller 。

在 Passive MVC 模式中，Model（模型）完全不知道自己身处于 MVC 结构之中。换句话说，Model 就是一个普通的对象，与 MVC 模式里面的其他组成部分完全没有关联。具体而言，MVC 模式涉及到下列三类对象：

-  M 代表 Model，即模型，用于封装与业务逻辑有关的代码和数据
-  V 代表 View，即视图，用于呈现内容给用户（也就是将程序运行的结果返回给浏览器显示）
-  C 代表 Controller，即控制器，用于接收用户输入（通过浏览器发起的请求），然后调用模型（Model）对输入数据进行处理并获得处理结果。最后将结果传递到视图（View），从而让用户能够看到自己操作的结果

经过这样简单的分离，我们就把应用程序操作数据的代码和处理用户输入输出的代码分离开来了。

这种分离有许多好处：

-  清晰的将应用程序分隔为独立的部分
-  业务逻辑代码能够很方便的在多处重复使用
-  方便开发人员分工协作
-  如果需要，可以方便开发人员对应用程序各个部分的代码进行测试


